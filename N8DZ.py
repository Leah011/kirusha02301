'''
#(№ 4315) (А. Кабанов) В файле 17-4.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 0 до 10 000 включительно. Рассматривается множество элементов последовательности, больших 100, которые удовлетворяют следующим условиям:
#- цифра в разряде десятков не превышает 4;
#− цифра в разряде сотен принадлежит отрезку [3; 7].
#Найдите количество таких чисел и минимальное из них.
a = [int(x) for x in open('4315.txt') if int(x)>100]
b = []
for j in a:
    s = str(j)
    if s[-2] in '01234' and s[-3] in '34567':
        b.append(j)
print(f"{len(b)=} {min(b)=}")
'''


'''
#(№ 4314) (А. Кабанов) В файле 17-4.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 0 до 10 000 включительно.
# Рассматривается множество элементов последовательности, которые удовлетворяют следующим условиям:
#− кратны 3, но не кратны 9;
#− последняя цифра не менее 4.
#Найдите количество таких чисел и целую часть их среднего арифметического.
a = [int(x) for x in open('4314.txt') ]
b = []
for j in a:
    if j % 3==0 and j % 9 !=0 and j%10>=4:
        b.append(j)
print(f"{len(b)=} {sum(b)//len(b)=}")
'''

'''
#(№ 4324) (А. Кабанов) В файле 17-4.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 0 до 10 000 включительно.
# Рассматривается множество элементов последовательности, которые удовлетворяют следующим условиям:
#а) Число в шестнадцатеричной записи оканчивается цифрой «B»;
#б) Число делится на 7, но не делится на 6, 13, 19.
#Найдите сумму таких чисел и их количество. Гарантируется, что искомая сумма не превосходит 107.
a = [int(x) for x in open('4324.txt')]
b =[]
summ = 0
for x in a:
    if x%16==11 and x%7==0 and x%6!=0 and x%13!=0 and x%19!=0:
        b.append(x)
        summ+=x
print(summ,len(b))
'''



'''
#(№ 4421) (П. Финкель) В файле 17-202.txt содержится последовательность целых чисел, которые принимают значения от -10000 до 10000 включительно.
# Тройка идущих подряд чисел последовательности называется уникальной, если только второе из них является положительным трёхзначным числом, заканчивающимся на 5.
# Определите количество уникальных троек чисел, а затем – максимальную из всех сумм таких троек.
def check(N):
    if N > 0 and len(str(N)) == 3 and abs(N) % 10 == 5:
        return True
    return False
a = [int(x) for x in open('4421.txt')]
b=[]
kol=0
for i in range(len(a)-2):
    x = a[i]
    y = a[i+1]
    z = a[i+2]
    if check(x)==False and check(y)==True and check(z)==False:
        kol+=1
        b.append((x+y+z))
print(kol,max(b))
'''


'''
#(№ 5206) (М. Шагитов) В файле 17-316.txt содержится последовательность целых чисел.
# Элементы последовательности - четырёхзначные натуральные числа.
# Назовём два различных четырёхзначных числа хорошей парой, если они имеют ровно одну общую цифру в каком-то из разрядов.
# Найдите все тройки элементов последовательности, в которых есть хотя бы одна хорошая пара,
# а сумма всех чисел тройки меньше максимальной суммы двух различных элементов последовательности.
# В ответе запишите количество найденных троек, затем минимальную из сумм элементов таких троек.
# В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
def check(x,y,z):
    x,y,z = str(x),str(y),str(z)
    f = 0
    for j in range(4):
        if x[j]==y[j] :
            f+=1
    if f==1:return True
    f=0
    for j in range(4):
        if y[j]==z[j] :
            f+=1
    if f==1:return True
    f = 0
    for j in range(4):
        if x[j] == z[j]:
            f += 1
    if f == 1: return True
    else:return False

a = [int(x) for x in open('5206.txt')]
b = sorted([int(x) for x in open('5206.txt')])
kol = 0
min_summ = 10000
for i in range (len(a)-2):
    x = a[i]
    y = a[i + 1]
    z = a[i + 2]
    summ = x+y+z
    if check(x,y,z)==True and summ < (b[-1] + b[-2]):
        kol+=1
        if summ<min_summ:
            min_summ = summ
print(kol,min_summ)
'''



'''
#(№ 5283) (И. Кушнир) В файле 17-335.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 1000 до 9999 включительно.
# Обозначим через M минимальное число в последовательности, кратное 43.
# Определите количество пар последовательности,
# в которых либо сумма чисел кратна M, либо хотя бы в одном из чисел последняя цифра совпадает с последней цифрой числа M.
# Гарантируется, что такая пара в последовательности есть.
# В ответе запишите количество найденных пар, затем максимальное из чисел, которые являются элементами таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
a = [int(x) for x in open('5283.txt')]
b=[]
for j in sorted(a):
    if int(j)%43==0:
        M = int(j)
        break

for i in range(len(a)-1):
    x = a[i]
    y = a[i + 1]
    if ((x+y)%M==0 and x%10!=M%10 and y%10!=M%10) or ((x+y)%M!=0 and (x%10==M%10 or y%10==M%10)) :
        b.append(x)
        b.append(y)
print(len(b)//2,max(b))
'''


'''
#(№ 5328) (ЕГЭ-2022) В файле 17-338.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.
# Определите количество пар элементов последовательности,
# в которых остаток от деления хотя бы одного из элементов на 117 равен минимальному элементу последовательности.
# В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
a = [int(x) for x in open('5328.txt')]
c =  min(a)
kol=0
maxi = 0
for i in range(len(a)-1):
    x = a[i]
    y = a[i+1]
    if x%117==c or y%117==c:
        kol+=1
    if x+y > maxi:
        maxi=x+y
print(kol,maxi)
'''


'''
#(№ 5801) (П. Финкель) В файле 17-346.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 1 до 200 000 включительно.
# Определите количество троек последовательности, для которых произведение всех цриф трёх чисел не превосходит 2·109 и удовлетворяет маске «55*2*».
# В качестве ответа укажите количество таких троек и наибольшее произведение их цифр.
# В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
def cif(x):
    b = 1
    while x!=0:
        b = b * (x%10)
        x = x//10
    return b
a =[int(x) for x in open('5801.txt')]
b=[]
for i in range(len(a)-2):
    x = cif(a[i])
    y = cif(a[i+1])
    z = cif(a[i+2])
    v = x*y*z
    if '55' in str(v)[:2] and '2' in str(v)[:-1] and v < 2*10**9:
        b.append(v)
print(len(b),max(b))
'''

#Часть 2
'''
#1. Напишите функцию для перевода числа из 10 системы счисления в любую, с основанием от 2 до 36.
def perevod(x,N):
    res=''
    alf='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    while x >0:
        res = alf[x%N] + res
        x//=N
    return res
'''
#2 Как перевести в python число из любой системы счисления с основанием от 2 до 36 в 10 систему счисления.
#дорешать


'''
#(№ 7) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
#1. Строится двоичная запись числа N.
#2. К этой записи дописываются справа ещё два разряда по следующему правилу:
#а) складываются все цифры двоичной записи, и остаток от деления суммы на 2 дописывается в конец числа (справа).
# Например, запись 11100 преобразуется в запись 111001;
#б) над этой записью производятся те же действия – справа дописывается остаток от деления суммы цифр на 2.
#Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью искомого числа R.
# Укажите такое наименьшее число N, для которого результат работы алгоритма больше 125. В ответе это число запишите в десятичной системе счисления.
def perevod(x,N):
    res=''
    alf='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    while x >0:
        res = alf[x%N] + res
        x//=N
    return res

for N in range(10000):
    R = str(perevod(N,2))
    k=0
    for i in range(len(R)):
        k+=int(R[i])
    R = R + str(k%2)
    k=0
    for j in range(len(R)):
        k += int(R[j])
    R = '0b' + R + str(k % 2)
    if int(R,2)>125:
        print(N)
        break
'''

'''
#(№ 3203) Автомат обрабатывает натуральное число N > 1 по следующему алгоритму:
#1) Строится двоичная запись числа N.
#2) В конец записи (справа) дописывается вторая справа цифра двоичной записи.
#3) В конец записи (справа) дописывается вторая слева цифра двоичной записи.
#4) Результат переводится в десятичную систему.
#Пример. Дано число N = 11. Алгоритм работает следующим образом.
#1) Двоичная запись числа N: 11 = 10112
#2) Вторая справа цифра 1, новая запись 101112.
#3) Вторая слева цифра 0, новая запись 1011102.
#4) Десятичное значение полученного числа 46.
#При каком наименьшем числе N в результате работы алгоритма получится R > 100? В ответе запишите это число в десятичной системе счисления.
m = set()
for N in range(2,1000):
    b = bin(N)[2:]
    b = b+b[-2]
    b = b + b[1]
    if int(b,2)>100:
        m.add(N)
print(min(m))
'''

'''
#(№ 6811) (ЕГЭ-2023) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом:
#1. Строится троичная запись числа N.
#2. Если число N делится на 3, к троичной записи слева приписывается 1, а справа – 02;
# иначе остаток от деления числа на 3 умножается на 4, переводится в троичную систему и дописывается в конец троичной записи.
#3. Полученная таким образом запись является троичной записью искомого числа R.
#Например, для числа 11 троичная запись 1023 преобразуется в запись 102223 = 107, для числа 12 троичная запись 1103 преобразуется в 1110023 = 353.
# Укажите максимальное значение N, после обработки которого с помощью этого алгоритма получается число R, меньшее чем 199.
def perevod(x,N):
    res=''
    alf = sorted('0123456789')
    while x!=0:
        res=alf[x%N]+res
        x=x//N
    return res
m = set()
for N in range(1,10000):
    b = perevod(N,3)
    if N%3==0:
        b = '1'+b+'02'
    else:
        b = b + perevod((N%3)*4,3)
    if int(b,3) < 199:
        m.add(N)
print(m)
'''

'''
#(№ 6703) (ЕГЭ-2023) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом:
#1. Строится троичная запись числа N.
#2. Если число N делится на 3, к троичной записи справа дописываются две её последние цифры, иначе остаток от деления числа на 3 умножается на 5,
# переводится в троичную систему и дописывается в конец троичной записи.
#3. Полученная таким образом запись является троичной записью искомого числа R.
#Например, для числа 11 троичная запись 1023 преобразуется в запись 1021013 = 307, для числа 12 троичная запись 1103 преобразуется в 110103 = 111.
# Укажите минимальное значение R, большее чем 133, которое может быть результатом работы алгоритма.
def perevod(x,N):
    res =''
    alf = '0123456789'
    while x !=0:
        res=alf[x%N]+res
        x=x//N
    return res
m=set()
for N in range(1,10000):
    b = perevod(N,3)
    if N%3==0:
        b = b+ b[-2:]
    else:
        b=b+perevod((N%3)*5,3)
    if int(b,3) >133 :
        m.add(int(b,3))
print(min(m))
'''
